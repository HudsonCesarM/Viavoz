{
  "Uuid": "cbe26318-2308-453d-b8a1-35a528bdf381",
  "IsCustomNode": false,
  "Description": "",
  "Name": "TIPO DE SISTEMA_script",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\n\r\nfrom System.Windows.Forms import Application, Form, Label, TextBox, Button, FormStartPosition\r\nfrom System.Drawing import Point, Size, Color\r\n\r\nclass MyForm(Form):\r\n    def __init__(self, theme='Dark'):\r\n        # Configurações do Formulário\r\n        self.Text = \"Parâmetro ORÇAMENTO TIPO DE SISTEMA\"\r\n        self.Size = Size(350, 200)\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.ShowIcon = False\r\n        self.MaximizeBox = False\r\n        self.MinimizeBox = False\r\n\r\n        # Configuração do tema\r\n        if theme == 'Light':\r\n            self.BackColor = Color.White\r\n            self.ForeColor = Color.Black\r\n        else:\r\n            self.BackColor = Color.FromArgb(45, 45, 48)  # Dark theme\r\n            self.ForeColor = Color.White\r\n\r\n        self.create_form()\r\n        self.create_ok_button()\r\n\r\n    def create_form(self):\r\n        \"\"\"Cria a Label e o campo de entrada de texto.\"\"\"\r\n        lbl = Label()\r\n        lbl.Text = \"Digite o texto:\"\r\n        lbl.Location = Point(20, 20)\r\n        lbl.Size = Size(150, 30)\r\n        self.Controls.Add(lbl)\r\n\r\n        self.txt_input = TextBox()\r\n        self.txt_input.Location = Point(20, 50)\r\n        self.txt_input.Size = Size(240, 30)\r\n        self.Controls.Add(self.txt_input)\r\n\r\n    def create_ok_button(self):\r\n        \"\"\"Cria o botão OK para capturar o texto e fechar o formulário.\"\"\"\r\n        btn_ok = Button()\r\n        btn_ok.Text = \"OK\"\r\n        btn_ok.Location = Point((self.ClientSize.Width - 100) // 2, 90)\r\n        btn_ok.Size = Size(100, 30)\r\n        btn_ok.Click += self.on_ok\r\n        self.Controls.Add(btn_ok)\r\n\r\n    def on_ok(self, sender, event):\r\n        \"\"\"Captura o texto digitado e fecha o formulário.\"\"\"\r\n        self.user_input = self.txt_input.Text\r\n        self.Close()\r\n\r\n# Criação do formulário\r\ntheme = \"Dark\"  # Você pode mudar para \"Light\" se quiser o tema claro\r\nform = MyForm(theme)\r\nApplication.Run(form)\r\n\r\n# O texto inserido pelo usuário será armazenado na variável 'form.user_input'\r\nOUT = form.user_input\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "eed387aad76b45adbcde7db4be1589bd",
      "Inputs": [
        {
          "Id": "cd3a959d411947619874ff4ae9a2c99f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6d9638a2b6294b76982261f187dcaba1",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import Element\r\n\r\n# Obter o documento ativo do Revit\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Obter os elementos selecionados a partir de IN[0] e o texto da IN[1]\r\nelements = UnwrapElement(IN[0])  # Desembrulha os elementos do Dynamo\r\ntext_to_set = IN[1]  # Texto a ser inserido no parâmetro \"ORÇAMENTO TIPO DE SISTEMA\"\r\n\r\n# Iniciar uma transação para modificar os parâmetros no Revit\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Iterar sobre os elementos e definir o valor no parâmetro \"ORÇAMENTO TIPO DE SISTEMA\"\r\nfor element in elements:\r\n    marca_param = element.LookupParameter(\"ORÇAMENTO TIPO DE SISTEMA\")\r\n    if marca_param and not marca_param.IsReadOnly:\r\n        marca_param.Set(text_to_set)\r\n\r\n# Finalizar a transação\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Saída\r\nOUT = \"Texto atualizado no parâmetro 'ORÇAMENTO TIPO DE SISTEMA' para {} elementos.\".format(len(elements))\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "499628238e654e7295272e757a058a3a",
      "Inputs": [
        {
          "Id": "44d7424967db4458a973a1bf53e169f7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e32677c97c1c47e09f81e51f3f124f1b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f0fe0c8ffa324548b1212ab8ce06eced",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#TEMPLATE Python Script by BIM Coder\r\n#Versão 1.0 - 08/24\r\n\r\n#---IMPORTAÇÕES\r\n# Sistema e .NET\r\nimport clr\r\nimport sys\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\n# Biblioteca de Geometria do Dynamo\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Nós do Dynamo\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# Documentos e Transações\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# DB da API do Revit\r\nimport Autodesk\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Interface do usuário da API do Revit\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nfrom Autodesk.Revit.UI.Selection import ObjectType\r\n\r\n# Documentos e Interfaces\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\n\r\n#---CLASSES E FUNÇÕES\r\n\r\n#---SCRIPT\r\n\r\n# Solicitar ao usuário que selecione múltiplos objetos do tipo Element (por exemplo, paredes, janelas, etc.)\r\n\r\nselected_references = uidoc.Selection.PickObjects(ObjectType.Element)\r\n\r\n# Obter os elementos a partir das referências\r\nselected_elements = [uidoc.Document.GetElement(reference) for reference in selected_references]\r\n\r\n# Saída para o Dynamo (lista de elementos Revit)\r\nOUT = selected_elements\r\n\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "8ba138b59b454181a734301eca6399b1",
      "Inputs": [
        {
          "Id": "05575417d4d14cadb67d19e892e4bb99",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "20d7ca10018746b298cc1d724684d11e",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Importando bibliotecas necessárias\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom Autodesk.Revit.DB import ElementId, FilteredElementCollector\r\n\r\n# Obtendo o documento ativo do Revit\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Função para obter elementos filhos\r\ndef get_child_elements(element):\r\n    child_elements = []\r\n    \r\n    # Coletor para buscar elementos\r\n    collector = FilteredElementCollector(doc).WhereElementIsNotElementType()\r\n    \r\n    for el in collector:\r\n        # Verifica se o elemento é filho do elemento pai (ajuste conforme a lógica necessária)\r\n        if el.GetType() == element.GetType() and el.OwnerViewId == element.OwnerViewId:\r\n            child_elements.append(el)\r\n    \r\n    return child_elements\r\n\r\n# Processando a entrada (lista de elementos)\r\ninput_elements = UnwrapElement(IN[0])  # IN[0] é a entrada da lista de elementos\r\nall_child_elements = []\r\n\r\nfor elem in input_elements:\r\n    children = get_child_elements(elem)\r\n    all_child_elements.extend(children)  # Adiciona os filhos à lista principal\r\n\r\n# Saída: lista única de todos os elementos filhos\r\nOUT = all_child_elements\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a03091fc7cfa4ed1a20db2c0357a8153",
      "Inputs": [
        {
          "Id": "0a76876967874e839e587d2272953ff2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9bbafb9ea3ce4477a803964445ec38bb",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\n\r\nfrom System.Windows.Forms import Application, Form, Label, TextBox, Button, FormStartPosition\r\nfrom System.Drawing import Point, Size, Color\r\n\r\nclass MyForm(Form):\r\n    def __init__(self, theme='Dark'):\r\n        # Configurações do Formulário\r\n        self.Text = \"Parâmetro ORÇAMENTO TIPO DE SISTEMA\"\r\n        self.Size = Size(300, 350)\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.ShowIcon = False\r\n        self.MaximizeBox = False\r\n        self.MinimizeBox = False\r\n\r\n        # Configuração do tema\r\n        if theme == 'Light':\r\n            self.BackColor = Color.White\r\n            self.ForeColor = Color.Black\r\n        else:\r\n            self.BackColor = Color.FromArgb(45, 45, 48)  # Dark theme\r\n            self.ForeColor = Color.White\r\n\r\n        self.create_form()\r\n        self.create_ok_button()\r\n\r\n    def create_form(self):\r\n        \"\"\"Cria a Label com as opções e o campo de entrada de texto.\"\"\"\r\n        lbl_options = Label()\r\n        lbl_options.Text = (\"\\nEscolha uma opção:\\n\\n\"\r\n                            \"1 - ARQUITETURA\\n\"\r\n                            \"2 - AUTOMACAO\\n\"\r\n                            \"3 - CABEAMENTO ESTRUTURADO\\n\"\r\n                            \"4 - CFTV\\n\"\r\n                            \"5 - ELETRICO\\n\"\r\n                            \"6 - EST. CONCRETO\\n\"\r\n                            \"7 - EST. METALICA\\n\"\r\n                            \"8 - HIDRAULICO\\n\"\r\n                            \"9 - INCENDIO\\n\"\r\n                            \"10 - LUMINOTECNICO\\n\"\r\n                            \"11 - SDAI\\n\"\r\n                            \"12 - SPDA\")\r\n        lbl_options.Location = Point(20, 20)\r\n        lbl_options.Size = Size(330, 160)\r\n        lbl_options.AutoSize = True\r\n        self.Controls.Add(lbl_options)\r\n\r\n        self.txt_input = TextBox()\r\n        self.txt_input.Location = Point(20, 220)\r\n        self.txt_input.Size = Size(200, 30)\r\n        self.Controls.Add(self.txt_input)\r\n\r\n    def create_ok_button(self):\r\n        \"\"\"Cria o botão OK para capturar o texto e fechar o formulário.\"\"\"\r\n        btn_ok = Button()\r\n        btn_ok.Text = \"OK\"\r\n        btn_ok.Location = Point((self.ClientSize.Width - 100) // 2, 260)\r\n        btn_ok.Size = Size(100, 30)\r\n        btn_ok.Click += self.on_ok\r\n        self.Controls.Add(btn_ok)\r\n\r\n    def on_ok(self, sender, event):\r\n        \"\"\"Captura o texto digitado e fecha o formulário.\"\"\"\r\n        options = {\r\n            1: \"ARQUITETURA\",\r\n            2: \"AUTOMACAO\",\r\n            3: \"CABEAMENTO ESTRUTURADO\",\r\n            4: \"CFTV\",\r\n            5: \"ELETRICO\",\r\n            6: \"EST. CONCRETO\",\r\n            7: \"EST. METALICA\",\r\n            8: \"HIDRAULICO\",\r\n            9: \"INCENDIO\",\r\n            10: \"LUMINOTECNICO\",\r\n            11: \"SDAI\",\r\n            12: \"SPDA\"\r\n        }\r\n\r\n        try:\r\n            input_value = int(self.txt_input.Text)\r\n            if input_value in options:\r\n                self.user_input = options[input_value]\r\n            else:\r\n                self.user_input = None\r\n                self.show_error(\"Por favor, escolha uma opção válida (1-12).\")\r\n        except ValueError:\r\n            self.user_input = None\r\n            self.show_error(\"Por favor, insira um número válido.\")\r\n\r\n        self.Close()\r\n\r\n    def show_error(self, message):\r\n        \"\"\"Exibe uma mensagem de erro.\"\"\"\r\n        error_label = Label()\r\n        error_label.Text = message\r\n        error_label.Location = Point(20, 260)\r\n        error_label.Size = Size(300, 30)\r\n        error_label.ForeColor = Color.Red\r\n        self.Controls.Add(error_label)\r\n\r\n# Criação do formulário\r\ntheme = \"Dark\"  # Você pode mudar para \"Light\" se quiser o tema claro\r\nform = MyForm(theme)\r\nApplication.Run(form)\r\n\r\n# O texto correspondente à opção escolhida será armazenado na variável 'form.user_input'\r\nOUT = form.user_input\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "ba0dba6294e84eebad133dd870a51acd",
      "Inputs": [
        {
          "Id": "9b68c20305794642a42136624ca92d4b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6f80c559d8a14db0afbb440437ab7c00",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\n\r\nfrom System.Windows.Forms import Application, Form, Label, TextBox, Button, FormStartPosition\r\nfrom System.Drawing import Point, Size, Color\r\n\r\nclass MyForm(Form):\r\n    def __init__(self, theme='Dark'):\r\n        # Configurações do Formulário\r\n        self.Text = \"Parâmetro ORÇAMENTO TIPO DE SISTEMA\"\r\n        self.Size = Size(350, 300)\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.ShowIcon = False\r\n        self.MaximizeBox = False\r\n        self.MinimizeBox = False\r\n\r\n        # Configuração do tema\r\n        if theme == 'Light':\r\n            self.BackColor = Color.White\r\n            self.ForeColor = Color.Black\r\n        else:\r\n            self.BackColor = Color.FromArgb(45, 45, 48)  # Dark theme\r\n            self.ForeColor = Color.White\r\n\r\n        self.create_form()\r\n        self.create_ok_button()\r\n\r\n    def create_form(self):\r\n        \"\"\"Cria a Label com as opções e o campo de entrada de texto.\"\"\"\r\n        lbl_options = Label()\r\n        lbl_options.Text = \"\\nEscolha uma opção:\\n\\n1 - AUTOMACAO\\n2 - CFTV\\n3 - ELETRICO\\n4 - INCENDIO\\n5 - LUMINOTECNICO\\n6 - CABEAMENTO ESTRUTURADO\\n7 - SPDA\\n8 - SDAI\"\r\n        lbl_options.Location = Point(20, 20)\r\n        lbl_options.Size = Size(300, 120)\r\n        lbl_options.AutoSize = True\r\n        self.Controls.Add(lbl_options)\r\n\r\n        self.txt_input = TextBox()\r\n        self.txt_input.Location = Point(20, 170)\r\n        self.txt_input.Size = Size(240, 30)\r\n        self.Controls.Add(self.txt_input)\r\n\r\n    def create_ok_button(self):\r\n        \"\"\"Cria o botão OK para capturar o texto e fechar o formulário.\"\"\"\r\n        btn_ok = Button()\r\n        btn_ok.Text = \"OK\"\r\n        btn_ok.Location = Point((self.ClientSize.Width - 100) // 2, 200)\r\n        btn_ok.Size = Size(100, 30)\r\n        btn_ok.Click += self.on_ok\r\n        self.Controls.Add(btn_ok)\r\n\r\n    def on_ok(self, sender, event):\r\n        \"\"\"Captura o texto digitado e fecha o formulário.\"\"\"\r\n        options = {\r\n            1: \"AUTOMACAO\",\r\n            2: \"CFTV\",\r\n            3: \"ELETRICO\",\r\n            4: \"INCENDIO\",\r\n            5: \"LUMINOTECNICO\",\r\n            6: \"CABEAMENTO ESTRUTURADO\",\r\n            7: \"SPDA\",\r\n            8: \"SDAI\"\r\n        }\r\n\r\n        try:\r\n            input_value = int(self.txt_input.Text)\r\n            if input_value in options:\r\n                self.user_input = options[input_value]\r\n            else:\r\n                self.user_input = None\r\n                self.show_error(\"Por favor, escolha uma opção válida (1-8).\")\r\n        except ValueError:\r\n            self.user_input = None\r\n            self.show_error(\"Por favor, insira um número válido.\")\r\n\r\n        self.Close()\r\n\r\n    def show_error(self, message):\r\n        \"\"\"Exibe uma mensagem de erro.\"\"\"\r\n        error_label = Label()\r\n        error_label.Text = message\r\n        error_label.Location = Point(20, 220)\r\n        error_label.Size = Size(300, 30)\r\n        error_label.ForeColor = Color.Red\r\n        self.Controls.Add(error_label)\r\n\r\n# Criação do formulário\r\ntheme = \"Dark\"  # Você pode mudar para \"Light\" se quiser o tema claro\r\nform = MyForm(theme)\r\nApplication.Run(form)\r\n\r\n# O texto correspondente à opção escolhida será armazenado na variável 'form.user_input'\r\nOUT = form.user_input\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "17d29759362f4e7abcccc16331719f8e",
      "Inputs": [
        {
          "Id": "c7178eeb7f954c1198625696eebf98a5",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bc5147a03b6e437bb91890acc59bea27",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\n\r\nfrom System.Windows.Forms import Application, Form, Label, TextBox, Button, FormStartPosition\r\nfrom System.Drawing import Point, Size, Color\r\n\r\nclass MyForm(Form):\r\n    def __init__(self, theme='Dark'):\r\n        # Configurações do Formulário\r\n        self.Text = \"Parâmetro ORÇAMENTO TIPO DE SISTEMA\"\r\n        self.Size = Size(300, 350)\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.ShowIcon = False\r\n        self.MaximizeBox = False\r\n        self.MinimizeBox = False\r\n\r\n        # Configuração do tema\r\n        if theme == 'Light':\r\n            self.BackColor = Color.White\r\n            self.ForeColor = Color.Black\r\n        else:\r\n            self.BackColor = Color.FromArgb(45, 45, 48)  # Dark theme\r\n            self.ForeColor = Color.White\r\n\r\n        self.create_form()\r\n        self.create_ok_button()\r\n\r\n    def create_form(self):\r\n        \"\"\"Cria a Label com as opções e o campo de entrada de texto.\"\"\"\r\n        lbl_options = Label()\r\n        lbl_options.Text = (\"\\nEscolha uma opção:\\n\\n\"\r\n                            \"1 - ARQUITETURA\\n\"\r\n                            \"2 - AUTOMACAO\\n\"\r\n                            \"3 - CABEAMENTO ESTRUTURADO\\n\"\r\n                            \"4 - CFTV\\n\"\r\n                            \"5 - ELETRICO\\n\"\r\n                            \"6 - EST. CONCRETO\\n\"\r\n                            \"7 - EST. METALICA\\n\"\r\n                            \"8 - HIDRAULICO\\n\"\r\n                            \"9 - INCENDIO\\n\"\r\n                            \"10 - LUMINOTECNICO\\n\"\r\n                            \"11 - SDAI\\n\"\r\n                            \"12 - SPDA\")\r\n        lbl_options.Location = Point(20, 20)\r\n        lbl_options.Size = Size(330, 160)\r\n        lbl_options.AutoSize = True\r\n        self.Controls.Add(lbl_options)\r\n\r\n        self.txt_input = TextBox()\r\n        self.txt_input.Location = Point(20, 220)\r\n        self.txt_input.Size = Size(200, 30)\r\n        self.Controls.Add(self.txt_input)\r\n\r\n    def create_ok_button(self):\r\n        \"\"\"Cria o botão OK para capturar o texto e fechar o formulário.\"\"\"\r\n        btn_ok = Button()\r\n        btn_ok.Text = \"OK\"\r\n        btn_ok.Location = Point((self.ClientSize.Width - 100) // 2, 260)\r\n        btn_ok.Size = Size(100, 30)\r\n        btn_ok.Click += self.on_ok\r\n        self.Controls.Add(btn_ok)\r\n\r\n    def on_ok(self, sender, event):\r\n        \"\"\"Captura o texto digitado e fecha o formulário.\"\"\"\r\n        options = {\r\n            1: \"ARQUITETURA\",\r\n            2: \"AUTOMACAO\",\r\n            3: \"CABEAMENTO ESTRUTURADO\",\r\n            4: \"CFTV\",\r\n            5: \"ELETRICO\",\r\n            6: \"EST. CONCRETO\",\r\n            7: \"EST. METALICA\",\r\n            8: \"HIDRAULICO\",\r\n            9: \"INCENDIO\",\r\n            10: \"LUMINOTECNICO\",\r\n            11: \"SDAI\",\r\n            12: \"SPDA\"\r\n        }\r\n\r\n        try:\r\n            input_value = int(self.txt_input.Text)\r\n            if input_value in options:\r\n                self.user_input = options[input_value]\r\n            else:\r\n                self.user_input = None\r\n                self.show_error(\"Por favor, escolha uma opção válida (1-12).\")\r\n        except ValueError:\r\n            self.user_input = None\r\n            self.show_error(\"Por favor, insira um número válido.\")\r\n\r\n        self.Close()\r\n\r\n    def show_error(self, message):\r\n        \"\"\"Exibe uma mensagem de erro.\"\"\"\r\n        error_label = Label()\r\n        error_label.Text = message\r\n        error_label.Location = Point(20, 260)\r\n        error_label.Size = Size(300, 30)\r\n        error_label.ForeColor = Color.Red\r\n        self.Controls.Add(error_label)\r\n\r\n# Criação do formulário\r\ntheme = \"Dark\"  # Você pode mudar para \"Light\" se quiser o tema claro\r\nform = MyForm(theme)\r\nApplication.Run(form)\r\n\r\n# O texto correspondente à opção escolhida será armazenado na variável 'form.user_input'\r\nOUT = form.user_input\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "090b89768de74b598647a583e40efbed",
      "Inputs": [
        {
          "Id": "c69f182664224a2ab653c6ab27fc50a8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5ac7f9f8ac024b72adfe3e65b22037ca",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    }
  ],
  "Connectors": [
    {
      "Start": "20d7ca10018746b298cc1d724684d11e",
      "End": "0a76876967874e839e587d2272953ff2",
      "Id": "0ba0dd298c454e1c9cf57fbe52cd6224",
      "IsHidden": "False"
    },
    {
      "Start": "9bbafb9ea3ce4477a803964445ec38bb",
      "End": "44d7424967db4458a973a1bf53e169f7",
      "Id": "27410681d72a47a0ad00edddb894205c",
      "IsHidden": "False"
    },
    {
      "Start": "5ac7f9f8ac024b72adfe3e65b22037ca",
      "End": "e32677c97c1c47e09f81e51f3f124f1b",
      "Id": "f219b05ca2be4e7ba4f57eb029e0e3ab",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Nenhum",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Visualização do plano de fundo",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "TEXTO",
        "ShowGeometry": true,
        "Id": "eed387aad76b45adbcde7db4be1589bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 34.534453337321224,
        "Y": 359.41803004758731
      },
      {
        "Name": "PREENCHER O PARAMETRO",
        "ShowGeometry": true,
        "Id": "499628238e654e7295272e757a058a3a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 568.65219544036938,
        "Y": 174.02042312903092
      },
      {
        "Name": "SELEÇÃO DOS ELEMENTOS",
        "ShowGeometry": true,
        "Id": "8ba138b59b454181a734301eca6399b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -159.0822035605961,
        "Y": 172.95862787752759
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "a03091fc7cfa4ed1a20db2c0357a8153",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 281.62269325882573,
        "Y": 174.65578875015774
      },
      {
        "Name": "TEXTO",
        "ShowGeometry": true,
        "Id": "ba0dba6294e84eebad133dd870a51acd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -41.553187798067881,
        "Y": 773.5778745001669
      },
      {
        "Name": "TEXTO",
        "ShowGeometry": true,
        "Id": "17d29759362f4e7abcccc16331719f8e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -33.001806008925143,
        "Y": 586.04125645002659
      },
      {
        "Name": "TEXTO",
        "ShowGeometry": true,
        "Id": "090b89768de74b598647a583e40efbed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 254.65690009446951,
        "Y": 483.27639378225615
      }
    ],
    "Annotations": [],
    "X": 66.229161238179543,
    "Y": -35.974480941005424,
    "Zoom": 0.676761192096621
  }
}